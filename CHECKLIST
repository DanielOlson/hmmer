Checklist for a HMMER distribution.

1. Make sure we're up to date w/ CVS. (Worry about commits here, on
   other machines and other dirs that may have squid modifications)
	% ./configure
        % make distclean
	% cvs update
	% cvs commit
   Clean up any stray files.

2. Test dev code before making release.
   This works anywhere (e.g. wren; don't have to be on wrasse)
   With and without memory leak tests ('make check' doesn't include -m flag)
   ccmalloc 0.3.9 is installed in /usr/local on wren and wrasse.
   Note: ccmalloc not threadsafe, so this doesn't test threads implementation.
   PVM isn't tested at all (yet).
    	% autoconf; (cd squid; autoconf)
     	% ./configure --enable-ccmalloc
        % make
	% (cd testsuite; ../ssdk/sqc -m -p ../squid 2 exercises.sqc . ../src)
	% make distclean
	% ./configure --enable-threads --enable-lfs
	% make
	% make check
	% make optcheck

3. Write release notes.
   cvs2cl.pl creates ChangeLog; a useful summary of CVS logs
	% ssdk/cvs2cl.pl    
        % emacs Release-Notes/RELEASE-${RELEASE}
	% cvs add Release-Notes/RELEASE-${RELEASE}

4. Update copyright, year, relcode, etc:
        configure.ac
	Licenses/gnu   (year only)

5. Commit to CVS. Include package and release # in the log message.
	% cvs commit

6. Make a distro. 
   yes, you have to autoconf and make a new configure script; you
   just updated the info in configure.ac, remember?
	% make distclean
	% autoconf; (cd squid; autoconf); ./configure
	% make dist
	

7. Create the binary distributions, on w001, the compile farm master node.
   ssh -x w001.
   Make a directory somewhere, go there.
         ln -s /nfs/wol2/people/eddy/src/hmmer/ssdk/nodebuild .
         ln -s /nfs/wol2/people/eddy/src/hmmer/ssdk/rootbuild .
         ln -s /nfs/wol2/people/eddy/src/hmmer/ssdk/buildall .
         ln -s /nfs/wol2/people/eddy/src/hmmer/hmmer-2.3.tar.gz .
         ./buildall hmmer-2.3 >& build.log &
         tail -f build.log

whelk01 
  env CC=icc CFLAGS="-O -static" ./configure --enable-threads --enable-lfs
  make
  make bindist
  make check

  binaries/hmmsearch tutorial/rrm.hmm nr > foo1 &
  binaries/hmmpfam /nfs/db01/databases/Pfam/Pfam_ls tutorial/Artemia.fa > foo2 &
  binaries/hmmbuild foo3 /nfs/db01/databases/Pfam/Pfam-A.seed > foo4 &
  binaries/hmmcalibrate foo3 >& foo5 &

  binaries/hmmbuild foo6 tutorial/pkinase.sto
  time binaries/hmmcalibrate --cpu 0 --num 50000 foo6
  time binaries/hmmcalibrate --cpu 4 --num 50000 foo6

  574.810u

polly.sgi.com  user:eddy pass:z    SGI Altix 3000, 16xItanium 2   sgi-linux-ia64
 tcsh
 scp wrasse.wustl.edu:hmmer-2.3.tar.gz .
 tar zxf hmmer-2.3.tar.gz
 cd hmmer-2.3
 source /opt/modules/init/tcsh
 module load intel-compilers-latest
 env CC=icc CFLAGS="-O -static" ./configure --enable-threads --enable-lfs

 make >& sgi-linux-ia64.log
 make bindist
 make check >>& sgi-linux-ia64.log 

 binaries/hmmbuild foo6 tutorial/pkinase.sto
 time binaries/hmmcalibrate --cpu 0 --num 50000 foo6 >>& sgi-linux-ia64.log
 time binaries/hmmcalibrate --cpu 4 --num 50000 foo6 >>& sgi-linux-ia64.log
 time binaries/hmmcalibrate --cpu 8 --num 50000 foo6 >>& sgi-linux-ia64.log
 time binaries/hmmcalibrate --cpu 16 --num 50000 foo6 >>& sgi-linux-ia64.log

 0:  243.309u 0.007s 4:03.29 100.0%  0+0k 0+0io 76pf+0w
 4:  252.647u 0.201s 1:03.40 398.8%  0+0k 0+0io 78pf+0w
 8:  262.813u 0.447s 0:33.20 792.9%  0+0k 0+0io 78pf+0w
16:  307.490u 2.232s 0:36.52 848.0%  0+0k 0+0io 78pf+0

 scp sgi-linux-ia64.log wrasse.wustl.edu:
 \rm sgi-linux-ia64.log foo6 
 cd ..
 mv hmmer-2.3 hmmer-2.3.bin.sgi-linux-ia64
 tar cf hmmer-2.3.bin.sgi-linux-ia64.tar hmmer-2.3.bin.sgi-linux-ia64
 gzip hmmer-2.3.bin.sgi-linux-ia64.tar 
 scp hmmer-2.3.bin.sgi-linux-ia64.tar.gz wrasse.wustl.edu:
 rm -rf hmmer-2.3.bin.sgi-linux-ia64.tar.gz
 rm -rf hmmer-2.3.bin.sgi-linux-ia64
 rm -rf hmmer-2.3.tar.gz