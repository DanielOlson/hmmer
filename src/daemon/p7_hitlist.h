//! Data structures for maintaining lists of hits in ways that make merging results from parallel threads easy
/*! How these structures work:  
 * A P7_HIT_CHUNK contains and describes a set of hits, which must be sorted in order of ascending object  ID.  
 * A P7_HITLIST contains either the entire set of hits found by a node or the entire set of hits found during a search. 
 *
 * P7_HIT_CHUNKs are typically generated by worker threads.  Worker threads search regions of a database in ascending order
 * by object ID.  When they find a hit, they add it to their P7_HIT_CHUNK.  When a worker thread finishes a region and needs to start
 * another, it inserts its chunk into the node's P7_HITLIST structure and starts a new one.  
*
* A P7_HITLIST contains a linked list of hits, sorted by object ID, and also a linked list of P7_HIT_CHUNKs, again sorted by object ID
* The P7_HIT_CHUNKs must have non-overlapping ranges of object IDs.  This will happen naturally when merging the chunks generated
* by the threads running on a single node, but merging the results from multiple machines will require merging the chunks by hand
* To insert a chunk into a hitlist, search the list of chunks in the list until you find the right place to insert the new chunk.  Splice it into 
* the list of chunks, and also splice the hits in the chunk into the full list
*/

//! Entry used to form a doubly-linked list of hits
/*! Invariant: hits in the list are required to be sorted in ascending order by object id  */
typedef struct p7_hitlist_entry{
	P7_HIT *hit; 
	P7_HITLIST_ENTRY *prev;
	P7_HITLIST_ENTRY *next;
}P7_HITLIST_ENTRY;

//! Structure that holds a chunk of hits, sorted by object id
typedef struct p7_hit_chunk{
	//! Beginning entry in the list
	P7_HITLIST_ENTRY *start;

	//! Last entry in the list
	P7_HITLIST_ENTRY *end;

	//! object ID of the first entry in the list
	uint64_t start_id;

	//! object ID of the last entry in the list
	uint64_t end_id;

	//Previous chunk in the list
	P7_HITLIST_ENTRY *prev;

	//Next chunk in the list
	P7_HITLIST_ENTRY *next;
}P7_HIT_CHUNK;

//! Holds the full list of hits that a machine has found
typdef struct p7_hitlist{
	//! lowest-ID hit in the list
	P7_HITLIST_ENTRY *hit_list_start;

	//! highest-ID hit in the list
	P7_HITLIST_ENTRY *hit_list_end;

	//! object ID of the first entry in the list
	uint64_t hit_list_start_id;

	//! object ID of the last entry in the list
	uint64_t hit_list_end_id;

	//! Start of the list of chunks
	P7_HIT_CHUNK *chunk_list_start;

	//! End of the list of chunks
	P7_HIT_CHUNK *chunk_list_end;
}P7_HITLIST;

