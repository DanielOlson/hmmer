################################################################# 
# Makefile for HMMER: Main project directory: installation, documentation
# CVS $Id$
###########
# @LICENSE@
###########

# On most Unices, you can build the package without modifying anything 
#   by just typing "./configure; make".
#
# You may want to modify the following make variables:
#   BINDIR  - where the executables will be installed by a 'make install'
#   MANDIR  - where the man pages will be installed by a 'make install'
#   CC      - which compiler to use
#   CFLAGS  - compiler flags to use

# where you want things installed
# Sort of uses GNU coding standards. ${prefix} might be /usr/local.
# ${exec_prefix} gives you some flexibility for installing architecture
# dependent files (e.g. the programs): an example ${exec_prefix} might be
# /nfs/share/irix64/
#
prefix      = @prefix@
exec_prefix = @exec_prefix@
BINDIR      = @bindir@
MANDIR      = @mandir@

# how to install the man pages; 
# cp is generally fine, unless you preformat your pages.
#
INSTMAN   = cp
MANSUFFIX = 1

# your compiler and compiler flags
#
CC     = @CC@
CFLAGS = @CFLAGS@

#######
## You should not need to modify below this line.
## Much of it is concerned with maintenance of the development version
## and building the release (indeed, several commands will only work in 
## St. Louis)
#######
SHELL       = /bin/sh
BASENAME    = "hmmer"
PACKAGE     = "HMMER"
RELEASE     = "2.1.4"
RELCODE     = "rel2_1_4"
RELEASEDATE = "in progress"
COPYRIGHT   = "Copyright \(C\) 1992-2000 HHMI/Washington University School of Medicine"
LICENSE     = "Freely distributed under the GNU General Public License \(GPL\)"
LICENSETAG  = gnu
COMPRESS    = gzip

# The program lists below for HMMER and SQUID are not necessarily
# a complete manifest. They are the list of stable programs that the
# package will install. There must be a man page for each one of them
# in the appropriate places (documentation/man for HMMER, lib/squid/Man
# for the SQUID library). 
#
PROGS = hmmalign\
	hmmbuild\
	hmmcalibrate\
	hmmconvert\
	hmmemit\
	hmmfetch\
	hmmindex\
	hmmpfam\
	hmmsearch

PVMPROGS = @PVMPROGS@

SQUIDPROGS = alistat\
	 seqstat\
	 sfetch\
	 shuffle\
	 sreformat

# all: if we don't have precompiled binaries, compiles all packages, 
#      and moves the supported executables into binaries/ subdirectory.
#
all: version.h
	@if test -d binaries; then\
	   echo "You appear to already have a compiled HMMER distribution.";\
           echo "You don't need to make.";\
           echo "";\
	   echo "If I'm wrong, it's because I'm only looking to see if you have";\
           echo "a 'binaries' directory; do 'make srcclean' to revert HMMER";\
           echo "to a pristine source distribution.";\
	else\
           (cd lib/squid; make CC="$(CC)" CFLAGS="$(CFLAGS)"; make module-install);\
           (cd src; make CC="$(CC)" CFLAGS="$(CFLAGS)"; make module-install);\
           mkdir binaries;\
              for prog in $(PROGS) $(PVMPROGS); do\
              mv src/$$prog binaries/;\
           done;\
           for prog in $(SQUIDPROGS); do\
              mv lib/squid/$$prog binaries/;\
           done;\
	fi

# version.h: 
#   create the version.h file that will define stamps used by 
#   squidcore.c's Banner(), which is called by all executables to
#   print a standard package/copyright/license banner;
#   then puts copies of version.h in all directories that are 
#   going to need it -- HMMER src/ and any modules of mine that
#   also produce installed executables (lib/squid)
#
version.h:
	echo "/* version.h -- automatically generated by a Makefile. DO NOT EDIT. */" > version.h
	echo "#define PACKAGE     \"$(PACKAGE)\""     >> version.h
	echo "#define RELEASE     \"$(RELEASE)\""     >> version.h
	echo "#define RELEASEDATE \"$(RELEASEDATE)\"" >> version.h
	echo "#define COPYRIGHT   \"$(COPYRIGHT)\""   >> version.h
	echo "#define LICENSE     \"$(LICENSE)\""     >> version.h
	cp version.h lib/squid/
	cp version.h src/

lib/libhmmer.a: 
	(cd src; make module CC="$(CC)" CFLAGS="$(CFLAGS)"; make module-install)

lib/libsquid.a:
	(cd lib/squid; make module CC="$(CC)" CFLAGS="$(CFLAGS)"; make module-install)

# check: compiles and runs test suite in testsuite/
#       These are public tests, distributed with the package.
#
check:	lib/libsquid.a lib/libhmmer.a
	(cd testsuite; make CC="$(CC)" CFLAGS="$(CFLAGS)")
	(cd testsuite; make check)

# install: installs the binaries in BINDIR/
#          installs man pages in MANDIR/man1/  (e.g. if MANSUFFIX is 1)
install: 
	for file in $(PROGS) $(SQUIDPROGS) $(PVMPROGS); do\
	   cp binaries/$$file $(BINDIR)/;\
	done
	for file in hmmer $(PROGS) $(SQUIDPROGS); do\
	   $(INSTMAN) documentation/man/$$file.man $(MANDIR)/man$(MANSUFFIX)/$$file.$(MANSUFFIX);\
	done
	for file in $(SQUIDPROGS); do\
	   $(INSTMAN) lib/squid/Man/$$file.man $(MANDIR)/man$(MANSUFFIX)/$$file.$(MANSUFFIX);\
	done

# "make clean" removes almost everything except configuration files
#              and binaries.
clean:
	-rm -f *.o *~ Makefile.bak core TAGS gmon.out
	(cd src;       make clean)
	(cd lib;       make clean)
	(cd lib/squid; make clean)
	(cd testsuite; make clean)

# "make distclean" leaves a pristine distribution.... and
#                  doesn't touch the binaries directory
#
distclean:
	-rm -f *.o *~ Makefile.bak core TAGS gmon.out
	-rm config.cache config.log config.status
	-rm version.h
	(cd src;       make distclean)
	(cd lib;       make distclean)
	(cd lib/squid; make distclean)
	(cd testsuite; make distclean)
	-rm Makefile

# "make srcclean" is the most aggressive. It is distclean,
#    plus removing the binaries directory -- leaving a
#    pristine source-only distribution.
#
srcclean:
	-rm -rf binaries
	make distclean

# verify: consistency checks on the package
#         These are private tests, not distributed with HMMER
verify:
	@echo Checking options for consistency and documentation...
	@for prog in $(PROGS) $(SQUIDPROGS); do\
	   ./checkoptions.pl $$prog;\
	done

# doc:  build the Userguide and on-line manual
#
doc:
	(cd Userguide; make)

# dist: build a new distribution directory in hmmer-$RELEASE
#       Exports from the CVS repository.
#       tags RCS files with $(RELCODE) for later reconstruction
#       squid RCS files are tagged with hmmer$(RELCODE).
#       Adds a license statement to each file that has a @LICENSE@ line.
#       Virtually identical to squid's make dist -- keep them in sync!
dist:
	# Delete old versions of the same release
	#
	@if test -d ${BASENAME}-$(RELEASE);        then rm -rf ${BASENAME}-$(RELEASE);        fi
	@if test -e ${BASENAME}-$(RELEASE).tar;    then rm -f  ${BASENAME}-$(RELEASE).tar;    fi
	@if test -e ${BASENAME}-$(RELEASE).tar.Z;  then rm -f  ${BASENAME}-$(RELEASE).tar.Z;  fi
	@if test -e ${BASENAME}-$(RELEASE).tar.gz; then rm -f  ${BASENAME}-$(RELEASE).tar.gz; fi
	# 
	# CVS tag and extract. -c: make sure we committed;
	#                      -F: allow more than one "make dist" per rel
	# prep: must have done "cvs commit", and CVSROOT must be set
	# We also need the squid library, so tag and export it too.
	#
	cvs tag -c -F $(RELCODE)
	cvs export -r $(RELCODE) -d ${BASENAME}-${RELEASE} ${BASENAME}
	cvs rtag -F ${BASENAME}_${RELCODE} squid
	(cd lib; cvs export -r ${BASENAME}_${RELCODE} -d squid squid)
	# 
	# Make the configure script from configure.in
	#
	(cd ${BASENAME}-${RELEASE}; autoconf)
	# 
	# Include the appropriate license files and release notes
	#
	cp  Licenses/LICENSE.$(LICENSETAG)  ${BASENAME}-$(RELEASE)/LICENSE
	cp  Licenses/COPYING.$(LICENSETAG)  ${BASENAME}-$(RELEASE)/COPYING
	-cp ReleaseNotes/RELEASE-$(RELEASE) ${BASENAME}-$(RELEASE)/NOTES
	#
	# Attach license stamps on files that need 'em (replace LICENSE keyword)
	# licenseadd.pl is basically harmless, so we can overannotate here by
	# trying to licenseadd everything.
	#
	find ${BASENAME}-${RELEASE}
	  licenseadd.pl Licenses/$(LICENSETAG) ${BASENAME}-${RELEASE}/$$file;\
        done
	for file in src/*.c src/*.h src/Makefile.in; do \
	   licenseadd.pl Licenses/$(LICENSETAG) ${BASENAME}-${RELEASE}/$$file;\
	done	
	for file in lib/squid/*.c lib/squid/*.h lib/squid/Makefile.in; do \
	   licenseadd.pl Licenses/$(LICENSETAG) ${BASENAME}-${RELEASE}/$$file;\
	done
	#
	# RCS extraction of HMMER Man/ manual pages
	#
	for file in $(PROGS) hmmer; do\
	   rcs -N$(RELCODE): Man/RCS/$$file.man,v;\
	   co -p Man/RCS/$$file.man,v | sed -e 's/@RELEASE@/${RELEASE}/g' \
                                            -e 's/@RELEASEDATE@/${RELEASEDATE}/g' \
	                                    -e 's/@SEEALSO@/${PROGS}/g'\
                > build/hmmer-$(RELEASE)/Man/$$file.man;\
	   licenseadd.pl Licenses/$(LICENSETAG) build/hmmer-$(RELEASE)/Man/$$file.man;\
	done
	#
	# RCS extraction of SQUID Man/ manual pages
	#
	for file in $(SQUIDPROGS); do\
	   rcs -Nhmmer_$(RELCODE): ${SQUIDSRCDIR}/Man/RCS/$$file.man,v;\
	   co -p ${SQUIDSRCDIR}/Man/RCS/$$file.man,v |\
               sed -e 's/@RELEASE@/${RELEASE}/g' \
                   -e 's/@RELEASEDATE@/${RELEASEDATE}/g' \
                   -e 's/@PACKAGE@/HMMER/g' \
	           -e 's/@SEEALSO@/${SQUIDPROGS}/g'\
                > build/hmmer-$(RELEASE)/Man/$$file.man;\
	   licenseadd.pl Licenses/$(LICENSETAG) build/hmmer-$(RELEASE)/Man/$$file.man;\
	done
	#
	# RCS extraction of Shiva/ testsuite
	#
	for file in $(SHIVADIST) Makefile.in; do\
	   rcs -N$(RELCODE): Shiva/RCS/$$file,v;\
	   co Shiva/RCS/$$file,v build/hmmer-$(RELEASE)/Shiva/$$file;\
	   licenseadd.pl Licenses/$(LICENSETAG) build/hmmer-$(RELEASE)/Shiva/$$file;\
	done
	# 
	# Compilation of documentation: includes hmmer-html.tar.Z and Userguide.ps
	# Documentation not provided in source form.
	#
	(cd Userguide; make clean)
	(cd Userguide; make)
	cp -f Userguide/Userguide.ps      build/hmmer-$(RELEASE)/Userguide/
	cp -f Userguide/Userguide.pdf     build/hmmer-$(RELEASE)/Userguide/
	cp -f Userguide/hmmer-html.tar.Z  build/hmmer-$(RELEASE)/Userguide/
#
# Packaging commands
#
	(cd build; tar cvf hmmer-$(RELEASE).tar hmmer-$(RELEASE))
	$(COMPRESS) -f build/hmmer-$(RELEASE).tar


# make ftpdist: install FTP distribution. Assumes a "make dist"
#               has already succeeded. Doesn't do the symlink;
#               doesn't install the on-line manual for the Web site.
#
ftpdist:
	cp -f $(READMES)                     $(FTPDIR)
	cp -f build/hmmer-$(RELEASE)/COPYING $(FTPDIR)
	cp -f build/hmmer-$(RELEASE)/LICENSETAG $(FTPDIR)
	cp -f build/hmmer-$(RELEASE)/NOTES   $(FTPDIR)
	cp -f build/hmmer-$(RELEASE).tar.Z   $(FTPDIR)
	cp -f build/hmmer-$(RELEASE)-*.tar.Z $(FTPDIR)
	cp -f Userguide/Userguide.ps         $(FTPDIR)
	cp -f Userguide/Userguide.pdf        $(FTPDIR)
	cp -f Userguide/hmmer-html.tar.Z     $(FTPDIR)


# make stable: Set up the FTP site symlink to the current stable HMMER release.
#
stable:
	ln -sf $(FTPDIR)/hmmer-$(RELEASE).tar.Z $(FTPDIR)/hmmer.tar.Z


