################################################################
# Makefile for the HMMER testsuite
# Makefile is generated from Makefile.in by autoconf
# DO NOT EDIT Makefile: only edit Makefile.in
#
# SRE, Sat Feb 16 10:18:40 2008 [janelia]
# SVN $Id$
#

CC       = @CC@
CFLAGS   = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS  = @LDFLAGS@
SIMDFLAGS= @SIMD_CFLAGS@
DEFS     = @DEFS@
LIBS     = @LIBS@ -lm
MPILIBS  = @MPILIBS@

SRCDIR   = ../src
ESLDIR   = ../easel

AR      = @AR@ rcv
RANLIB  = @RANLIB@

UNIT_TESTS = \
	build_utest\
	dp_generic_utest\
	impl_sse_utest\
	logsum_utest\
	modelconfig_utest\
	p7_gmx_utest\
	p7_hmm_utest\
	p7_hmmfile_utest\
	p7_profile_utest\
	p7_tophits_utest

all:  ${UNIT_TESTS}

check:  ${UNIT_TESTS}
	@echo 
	@echo Running HMMER test suite...
	@echo
	@${ESLDIR}/devkit/sqc 2 testsuite.sqc .

.c.o:
	${CC} -I ${EASELLIB} ${CFLAGS} ${SIMDFLAGS} ${DEFS} -c $<		

FORCE:


# Unit test compilation:
# 
# To compile unit tests, we need to construct a command line
# from module basename, module's testdriver flag, and module's
# C file. This is accomplished via a complex-looking shell incantation;
# xref J1/81.
#   $@           =  driver name            p7_tophits_utest
#   $${BASENAME} =  base module name       tophits
#   $${DFLAG}    =  driver flag            p7TOPHITS_TESTDRIVE
#   $${DFILE}    =  driver's C file        p7_tophits.c
#
$(UNIT_TESTS): FORCE
	@echo Compiling $@ ...
	@BASENAME=`echo $@ | sed -e 's/_utest//' | sed -e 's/^p7_//'` ;\
	DFLAG=`echo $${BASENAME} | sed -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`;\
	DFLAG=p7$${DFLAG}_TESTDRIVE ;\
	if test -e ${SRCDIR}/p7_$${BASENAME}.c; then \
           DFILE=p7_$${BASENAME}.c ;\
        else \
           DFILE=$${BASENAME}.c ;\
        fi;\
	${CC} ${CFLAGS} ${SIMDFLAGS} ${DEFS} ${LDFLAGS} -o $@ -I${SRCDIR} -I${ESLDIR} -L${SRCDIR} -L${ESLDIR} -D$${DFLAG} ${SRCDIR}/$${DFILE} ${MPILIBS} -lhmmer -leasel ${LIBS}


clean:
	-rm -f *.gcno *.gcda *.gcov
	-rm -f *.o *~ 
	-rm -f ${UNIT_TESTS}

distclean:
	make clean
	-rm -f Makefile
